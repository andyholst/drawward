C4Container
  Person(person, "Person", "Description of person.")
  System_Boundary(authorizationServer, "Authorization Server, domain: security") {
    Container(publicWebBrowser, "Public Web Browser", "Angular", "A public web browser to access non sensitive backend services")
    Container(platformWebBrowser, "Platform Web Browser", "React", "User uses the platform web browser to maintain the cluster of the services")
    Container(platformWebClient, "Platform Web Client", "Spring Boot", "Internal Web Client for internal users to access more privileged services.")
    Container(authorizationService, "Authorization Service", "Spring Boot", "Authorizez the person/system based on Oauth2 protocol based on /authorize, /token, /revoke, /register-client, /introspect")
    Container(apiGateway, "API Gateway", "Kong", "Routes and secures all HTTP traffic for authorization, token validation, and service communication clustered for scalability and reliability")
    Container(tokenValidatorService, "Token Validator Service", "Spring Boot", "Validates tokens for all protected requests [JSON/HTTP]")
    Container(apiService, "API Service", "Spring Boot", "Provide OpenAPI endpoints")
    Container(transactionMonitoringService, "Transaction Monitoring Service", "SpringBoot", "Internal service talking to the API service through the API Gateway and needs a valid token to talk with other services throuyh HTTP calls.")
    Container(clientRegistrator, "Client Registrator", "Spring Boot", "Processes stored kafka client messages and register each of them accordingly")
    ContainerDb(postgres, "Postgres database", "PostgreSQL", "Contains users and clients to authenticate person and machines")
    ContainerDb(redis, "Redis Database", "Redis", "Contains Access/Refresh tokens for limited time")
    ContainerDb(secretManager, "Secret Manager", "Hashcorp Vault", "Stores secrets for rotating JWT secrets for generating JWT tokens")
    ContainerDb(clientsToBeRegistered, "Clients To Be Registered", "Apache Kafka", "Going through a batch process to register new client credentials")
  }

  Rel(person, publicWebBrowser, "Person authorizes themselves with authorization code flow", "JSON/HTTP")
  Rel(person, platformWebBrowser, "Makes API calls with valid token", "JSON/HTTP")
  Rel(publicWebBrowser, authorizationService, "Exchanges authorization code for access/refresh token and to exchange refresh token for new access token", "JSON/HTTP")
  Rel(platformWebBrowser, platformWebClient, "Authorize themselves with privileged token access through the Platform Web Client", "JSON/HTTP")
  Rel(platformWebClient, apiGateway, "Makes API calls with validated token", "JSON/HTTP")
  Rel(platformWebClient, clientsToBeRegistered, "Stores new clients to be registered", "kafka")
  Rel(platformWebClient, authorizationService, "Authorize the user to get a valid access/refresh token", "JSON/HTTP")
  Rel(clientsToBeRegistered, clientRegistrator, "Process stored new clients", "kafka")
  Rel(clientRegistrator, authorizationService, "Register new clients over the /register-client endpoint", "JSON/HTTP")
  Rel(authorizationService, postgres, "Authenticates user and if they are able to acquire the specific client scopes", "JDBC")
  Rel(authorizationService, postgres, "Registers clients and stores credentials", "JDBC")
  Rel(authorizationService, redis, "Stores Access/Refresh Token", "RESP")
  Rel(authorizationService, secretManager, "Generates token with fetched JWT secret", "HTTPS")
  Rel(apiGateway, tokenValidatorService, "Validate Token", "JSON/HTTP")
  Rel(apiGateway, apiService, "Routes authenticated requests to protected API Service [JSON/HTTP]", "JSON/HTTP")
  Rel(tokenValidatorService, redis, "Checks that token is not invalidated", "RESP")
  Rel(tokenValidatorService, secretManager, "Validates Token with help of JWT secret", "HTTPS")
  Rel(transactionMonitoringService, authorizationService, "Authorize themselves through client credentials token flow", "JSON/HTTP")
